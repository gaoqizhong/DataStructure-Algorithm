# 438.找到字符串中所有字母异位词

### 题目

【middle】给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。

<https://leetcode.cn/problems/find-all-anagrams-in-a-string>

### 方法

【滑动窗口】这道题中我们首先要考虑的是：如何处理 “异位词” 。说白了，这就是一个全摆列，我们根本不需要关心字符的顺序，只统计字符的出现次数即可。

这道题的思路就是：先统计 p 中字符出现的次数，再在 s 中维护一个滑动窗口，实时统计窗口中当前各字符的数量。

【时间复杂度】O(n)

【空间复杂度】O(n)

### 代码

```cpp
// 抄的题解
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int sLen = s.size(), pLen = p.size();

        if (sLen < pLen) {
            return vector<int>();
        }

        vector<int> ans;
        vector<int> sCount(26);
        vector<int> pCount(26);
        for (int i = 0; i < pLen; ++i) {
            ++sCount[s[i] - 'a'];
            ++pCount[p[i] - 'a'];
        }

        if (sCount == pCount) {
            ans.emplace_back(0);
        }

        for (int i = 0; i < sLen - pLen; ++i) {
            --sCount[s[i] - 'a'];
            ++sCount[s[i + pLen] - 'a'];

            if (sCount == pCount) {
                ans.emplace_back(i + 1);
            }
        }

        return ans;
    }
};
```

